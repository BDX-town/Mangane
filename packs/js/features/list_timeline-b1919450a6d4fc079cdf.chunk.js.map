{"version":3,"file":"packs/js/features/list_timeline-b1919450a6d4fc079cdf.chunk.js","mappings":"uOAoBm7B,UAfh6B,WAAK,IAAMA,GAAS,UAAuBC,GAAI,UAAW,GAEvEC,GAAK,SAAe,SAAAC,GAAO,OAAAA,EAAMC,MAAMC,IAAIJ,OACjD,IAAAK,YAAU,WAAKN,GAAS,QAAUC,IAAKD,GAAS,QAAmBC,IAAK,IAAMM,EAAWP,GAAS,QAAkBC,IAAK,OAAM,WAAKM,OAAiB,CAACN,IAAK,IAYrJO,EAAMN,EAAKA,EAAKM,MAAMP,EAAG,QAAiB,IAAPC,EAAoB,OAAmB,OAAK,IAAO,QAAG,GAAoB,OAAK,MAAM,QAAG,GAAoB,OAAK,KAAQ,MAAY,IAAU,IAAPA,EAAc,OAAmB,OAAK,IAAiB,IAAK,IAAMO,GAA0B,OAAK,MAAM,QAAG,GAAoB,OAAK,IAAiB,CAACR,GAAG,oBAAoBS,eAAe,2GAAuH,OAAK,KAAK,KAAiB,OAAK,KAAK,KAAiB,OAAK,KAAO,CAACC,QAZ7S,WAAKX,GAAS,QAAU,cAAc,CAACY,OAAOX,YAYwR,GAAoB,OAAK,IAAiB,CAACA,GAAG,oBAAoBS,eAAe,+BAA+B,OAAmB,OAAK,IAAO,CAACG,MAAML,EAAMM,QAAQN,EAAMO,aAAY,EAAKC,YAAW,QAAO,GAAoB,OAAK,IAAS,CAACC,UAAU,gBAAgBC,WAAW,QAAQC,OAAOlB,GAAImB,WAZvrB,SAAAC,GAAQrB,GAAS,QAAmBC,EAAG,CAACoB,MAAK,MAYoqBZ,aAAaA,EAAaa,WAAW","sources":["webpack://mangane-fe/./app/soapbox/features/list_timeline/index.tsx"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import React,{useEffect}from'react';import{FormattedMessage}from'react-intl';import{useParams}from'react-router-dom';import{fetchList}from'soapbox/actions/lists';import{openModal}from'soapbox/actions/modals';import{connectListStream}from'soapbox/actions/streaming';import{expandListTimeline}from'soapbox/actions/timelines';import MissingIndicator from'soapbox/components/missing_indicator';import{Button,Spinner}from'soapbox/components/ui';import Column from'soapbox/features/ui/components/column';import{useAppDispatch,useAppSelector}from'soapbox/hooks';import Timeline from'../ui/components/timeline';// const messages = defineMessages({\n//   deleteHeading: { id: 'confirmations.delete_list.heading', defaultMessage: 'Delete list' },\n//   deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n//   deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n// });\nconst ListTimeline=()=>{const dispatch=useAppDispatch();const{id}=useParams();// const intl = useIntl();\n// const history = useHistory();\nconst list=useAppSelector(state=>state.lists.get(id));// const hasUnread = useAppSelector((state) => state.timelines.get(`list:${props.params.id}`)?.unread > 0);\nuseEffect(()=>{dispatch(fetchList(id));dispatch(expandListTimeline(id));const disconnect=dispatch(connectListStream(id));return()=>{disconnect();};},[id]);const handleLoadMore=maxId=>{dispatch(expandListTimeline(id,{maxId}));};const handleEditClick=()=>{dispatch(openModal('LIST_EDITOR',{listId:id}));};// const handleDeleteClick = () => {\n//   dispatch(openModal('CONFIRM', {\n//     icon: require('@tabler/icons/trash.svg'),\n//     heading: intl.formatMessage(messages.deleteHeading),\n//     message: intl.formatMessage(messages.deleteMessage),\n//     confirm: intl.formatMessage(messages.deleteConfirm),\n//     onConfirm: () => {\n//       dispatch(deleteList(id));\n//       history.push('/lists');\n//     },\n//   }));\n// };\nconst title=list?list.title:id;if(typeof list==='undefined'){return/*#__PURE__*/_jsx(Column,{},void 0,/*#__PURE__*/_jsx(\"div\",{},void 0,/*#__PURE__*/_jsx(Spinner,{})));}else if(list===false){return/*#__PURE__*/_jsx(MissingIndicator,{});}const emptyMessage=/*#__PURE__*/_jsx(\"div\",{},void 0,/*#__PURE__*/_jsx(FormattedMessage,{id:\"empty_column.list\",defaultMessage:\"There is nothing in this list yet. When members of this list create new posts, they will appear here.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{onClick:handleEditClick},void 0,/*#__PURE__*/_jsx(FormattedMessage,{id:\"list.click_to_add\",defaultMessage:\"Click here to add people\"})));return/*#__PURE__*/_jsx(Column,{label:title,heading:title,transparent:true,withHeader:false},void 0,/*#__PURE__*/_jsx(Timeline,{scrollKey:\"list_timeline\",timelineId:\"list:\".concat(id),onLoadMore:handleLoadMore,emptyMessage:emptyMessage,divideType:\"space\"}));};export default ListTimeline;"],"names":["dispatch","id","list","state","lists","get","useEffect","disconnect","title","emptyMessage","defaultMessage","onClick","listId","label","heading","transparent","withHeader","scrollKey","timelineId","concat","onLoadMore","maxId","divideType"],"sourceRoot":""}