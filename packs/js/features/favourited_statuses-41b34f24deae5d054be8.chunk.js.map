{"version":3,"file":"packs/js/features/favourited_statuses-41b34f24deae5d054be8.chunk.js","mappings":"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","sources":["webpack://mangane-fe/./app/soapbox/features/favourited_statuses/index.js","webpack://mangane-fe/./app/soapbox/features/profile_fields/index.tsx"],"sourcesContent":["import _jsx from\"@babel/runtime/helpers/esm/jsx\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";var _dec,_class,_class2;import\"core-js/modules/web.dom-collections.iterator.js\";import debounce from'lodash/debounce';import PropTypes from'prop-types';import React from'react';import ImmutablePropTypes from'react-immutable-proptypes';import ImmutablePureComponent from'react-immutable-pure-component';import{defineMessages,injectIntl,FormattedMessage}from'react-intl';import{connect}from'react-redux';import{fetchAccount,fetchAccountByUsername}from'soapbox/actions/accounts';import{fetchFavouritedStatuses,expandFavouritedStatuses,fetchAccountFavouritedStatuses,expandAccountFavouritedStatuses}from'soapbox/actions/favourites';import MissingIndicator from'soapbox/components/missing_indicator';import StatusList from'soapbox/components/status_list';import{Spinner}from'soapbox/components/ui';import{findAccountByUsername}from'soapbox/selectors';import{getFeatures}from'soapbox/utils/features';import Column from'../ui/components/column';const messages=defineMessages({heading:{\"id\":\"column.favourited_statuses\",\"defaultMessage\":\"Liked posts\"}});const mapStateToProps=(state,_ref)=>{var _state$status_lists$g,_state$status_lists$g2,_state$status_lists$g3;let{params}=_ref;const username=params.username||'';const me=state.get('me');const meUsername=state.getIn(['accounts',me,'username'],'');const isMyAccount=username.toLowerCase()===meUsername.toLowerCase();const features=getFeatures(state.get('instance'));if(isMyAccount){return{isMyAccount,statusIds:state.status_lists.get('favourites').items,isLoading:state.status_lists.get('favourites').isLoading,hasMore:!!state.status_lists.get('favourites').next};}const accountFetchError=(state.getIn(['accounts',-1,'username'])||'').toLowerCase()===username.toLowerCase();let accountId=-1;if(accountFetchError){accountId=null;}else{const account=findAccountByUsername(state,username);accountId=account?account.getIn(['id'],null):-1;}const isBlocked=state.getIn(['relationships',accountId,'blocked_by'],false);const unavailable=me===accountId?false:isBlocked&&!features.blockersVisible;return{isMyAccount,accountId,unavailable,username,isAccount:!!state.getIn(['accounts',accountId]),statusIds:((_state$status_lists$g=state.status_lists.get(\"favourites:\".concat(accountId)))===null||_state$status_lists$g===void 0?void 0:_state$status_lists$g.items)||[],isLoading:(_state$status_lists$g2=state.status_lists.get(\"favourites:\".concat(accountId)))===null||_state$status_lists$g2===void 0?void 0:_state$status_lists$g2.isLoading,hasMore:!!((_state$status_lists$g3=state.status_lists.get(\"favourites:\".concat(accountId)))!==null&&_state$status_lists$g3!==void 0&&_state$status_lists$g3.next)};};let Favourites=(_dec=connect(mapStateToProps),_dec(_class=injectIntl(_class=(_class2=class Favourites extends ImmutablePureComponent{constructor(){super(...arguments);_defineProperty(this,\"handleLoadMore\",debounce(()=>{const{accountId,isMyAccount}=this.props;if(isMyAccount){this.props.dispatch(expandFavouritedStatuses());}else{this.props.dispatch(expandAccountFavouritedStatuses(accountId));}},300,{leading:true}));}componentDidMount(){const{accountId,isMyAccount,username}=this.props;if(isMyAccount)this.props.dispatch(fetchFavouritedStatuses());else{if(accountId&&accountId!==-1){this.props.dispatch(fetchAccount(accountId));this.props.dispatch(fetchAccountFavouritedStatuses(accountId));}else{this.props.dispatch(fetchAccountByUsername(username));}}}componentDidUpdate(prevProps){const{accountId,isMyAccount}=this.props;if(!isMyAccount&&accountId&&accountId!==-1&&accountId!==prevProps.accountId&&accountId){this.props.dispatch(fetchAccount(accountId));this.props.dispatch(fetchAccountFavouritedStatuses(accountId));}}render(){const{intl,statusIds,isLoading,hasMore,isMyAccount,isAccount,accountId,unavailable}=this.props;if(!isMyAccount&&!isAccount&&accountId!==-1){return/*#__PURE__*/_jsx(MissingIndicator,{});}if(accountId===-1){return/*#__PURE__*/_jsx(Column,{},void 0,/*#__PURE__*/_jsx(Spinner,{}));}if(unavailable){return/*#__PURE__*/_jsx(Column,{},void 0,/*#__PURE__*/_jsx(\"div\",{className:\"empty-column-indicator\"},void 0,/*#__PURE__*/_jsx(FormattedMessage,{id:\"empty_column.account_unavailable\",defaultMessage:\"Profile unavailable\"})));}const emptyMessage=isMyAccount?/*#__PURE__*/_jsx(FormattedMessage,{id:\"empty_column.favourited_statuses\",defaultMessage:\"You don't have any liked posts yet. When you like one, it will show up here.\"}):/*#__PURE__*/_jsx(FormattedMessage,{id:\"empty_column.account_favourited_statuses\",defaultMessage:\"This user doesn't have any liked posts yet.\"});return/*#__PURE__*/_jsx(Column,{label:intl.formatMessage(messages.heading),withHeader:false,transparent:true},void 0,/*#__PURE__*/_jsx(StatusList,{statusIds:statusIds,scrollKey:\"favourited_statuses\",hasMore:hasMore,isLoading:typeof isLoading==='boolean'?isLoading:true,onLoadMore:this.handleLoadMore,emptyMessage:emptyMessage}));}},_defineProperty(_class2,\"propTypes\",{dispatch:PropTypes.func.isRequired,statusIds:ImmutablePropTypes.orderedSet.isRequired,intl:PropTypes.object.isRequired,hasMore:PropTypes.bool,isLoading:PropTypes.bool,isMyAccount:PropTypes.bool.isRequired}),_class2))||_class)||_class);export{Favourites as default};","import _jsx from\"@babel/runtime/helpers/esm/jsx\";import React from'react';import{FormattedMessage}from'react-intl';import{useParams}from'react-router-dom';import{fetchAccountByUsername}from'soapbox/actions/accounts';import MissingIndicator from'soapbox/components/missing_indicator';import{Card}from'soapbox/components/ui';import BundleContainer from'soapbox/features/ui/containers/bundle_container';import{ProfileFieldsPanel}from'soapbox/features/ui/util/async-components';import{useAppDispatch,useAppSelector}from'soapbox/hooks';import{findAccountByUsername}from'soapbox/selectors';const ProfileFields=()=>{const{username}=useParams();const dispatch=useAppDispatch();const account=useAppSelector(state=>{const account=findAccountByUsername(state,username);if(!account){dispatch(fetchAccountByUsername(username));}return account;});const isAccount=useAppSelector(state=>!!state.getIn(['accounts',account===null||account===void 0?void 0:account.id]));if(!isAccount){return/*#__PURE__*/_jsx(MissingIndicator,{});}return account.fields.isEmpty()?/*#__PURE__*/_jsx(\"div\",{className:\"mt-2\"},void 0,/*#__PURE__*/_jsx(Card,{variant:\"rounded\",size:\"lg\"},void 0,/*#__PURE__*/_jsx(FormattedMessage,{id:\"account.no_fields\",defaultMessage:\"This section is empty for now.\"}))):/*#__PURE__*/_jsx(BundleContainer,{fetchComponent:ProfileFieldsPanel},void 0,Component=>/*#__PURE__*/_jsx(Component,{account:account}));};export default ProfileFields;"],"names":["_class","_class2","messages","heading","Favourites","state","_ref","_state$status_lists$g","_state$status_lists$g2","_state$status_lists$g3","username","me","get","meUsername","getIn","isMyAccount","toLowerCase","features","statusIds","status_lists","items","isLoading","hasMore","next","accountId","account","isBlocked","unavailable","blockersVisible","isAccount","concat","_dec","arguments","props","dispatch","leading","componentDidMount","this","componentDidUpdate","prevProps","render","intl","className","id","defaultMessage","emptyMessage","label","formatMessage","withHeader","transparent","scrollKey","onLoadMore","handleLoadMore","fields","isEmpty","variant","size","fetchComponent","Component"],"sourceRoot":""}