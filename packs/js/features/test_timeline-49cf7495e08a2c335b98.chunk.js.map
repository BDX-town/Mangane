{"version":3,"file":"packs/js/features/test_timeline-49cf7495e08a2c335b98.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,sBAwE4B;AAxE5B,IAAI,YAAY,GAAG,gFAAgF,CAAC;AAC1E;AAC6C;AAC7B;AACuB;AACC;AACJ;AACjB;AACI;AACjD,IAAM,QAAQ,GAAG,0DAAc,CAAC;IAC9B,KAAK,EAAE;QACL,IAAI,EAAE,aAAa;QACnB,gBAAgB,EAAE,eAAe;KAClC;CACF,CAAC,CAAC;AACH;;;GAGG;AAEH,IAAM,aAAa,GAAG,CAAC,mBAAO,CAAC,8DAAoD,CAAC,EAAE,mBAAO,CAAC,oFAA0E,CAAC,EAAE,mBAAO,CAAC,0EAAgE,CAAC,EAAE,mBAAO,CAAC,iEAAuD,CAAC,EAAE,mBAAO,CAAC,4EAAkE,CAAC,CAAC,CAAC;AACrY,IAAM,UAAU,GAAG,MAAM,CAAC;AAC1B,IAAM,SAAS,GAAG,KAAK,CAAC;AAExB,IAAM,YAAY,GAAG;IACnB,IAAM,IAAI,GAAG,sDAAO,EAAE,CAAC;IACvB,IAAM,QAAQ,GAAG,wDAAW,EAAE,CAAC;IAC/B,4CAAe,CAAC;QACd,QAAQ,CAAC,+EAAqB,CAAC,aAAa,CAAC,CAAC,CAAC;QAC/C,QAAQ,CAAC,gFAAqB,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACxF,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,aAAa,iDAAmB,CAAC,kDAAM,EAAE;QAC9C,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC;QACzC,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,KAAK;QACjB,MAAM,EAAE,KAAI;QACZ,QAAQ,EAAE;YACR,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;SAChB;KACF,EAAE,aAAa,iDAAmB,CAAC,yEAAa,EAAE;QACjD,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC3C,MAAM,EAAE,KAAI;QACZ,QAAQ,EAAE;YACR,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;SAChB;KACF,CAAC,EAAE,aAAa,iDAAmB,CAAC,+DAAQ,EAAE;QAC7C,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC;QAC7C,UAAU,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QACnE,YAAY,EAAE,aAAa,iDAAmB,CAAC,kDAAgB,EAAE;YAC/D,EAAE,EAAE,mBAAmB;YACvB,cAAc,EAAE,6BAA6B;YAC7C,MAAM,EAAE,KAAI;YACZ,QAAQ,EAAE;gBACR,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,EAAE;aACjB;SACF,CAAC;QACF,UAAU,EAAE,OAAO;QACnB,MAAM,EAAE,KAAI;QACZ,QAAQ,EAAE;YACR,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;SAChB;KACF,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,+DAAe,YAAY,EAAC","sources":["webpack://mangane-fe/./app/soapbox/features/test_timeline/index.tsx"],"sourcesContent":["var _jsxFileName = \"/home/runner/work/Mangane/Mangane/app/soapbox/features/test_timeline/index.tsx\";\nimport React from 'react';\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { importFetchedStatuses } from 'soapbox/actions/importer';\nimport { expandTimelineSuccess } from 'soapbox/actions/timelines';\nimport SubNavigation from 'soapbox/components/sub_navigation';\nimport { Column } from '../../components/ui';\nimport Timeline from '../ui/components/timeline';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"column.test\",\n    \"defaultMessage\": \"Test timeline\"\n  }\n});\n/**\n * List of mock statuses to display in the timeline.\n * These get embedded into the build, but only in this chunk, so it's okay.\n */\n\nconst MOCK_STATUSES = [require('soapbox/__fixtures__/pleroma-status-with-poll.json'), require('soapbox/__fixtures__/pleroma-status-vertical-video-without-metadata.json'), require('soapbox/__fixtures__/pleroma-status-with-poll-with-emojis.json'), require('soapbox/__fixtures__/pleroma-quote-of-quote-post.json'), require('soapbox/__fixtures__/truthsocial-status-with-external-video.json')];\nconst timelineId = 'test';\nconst onlyMedia = false;\n\nconst TestTimeline = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(importFetchedStatuses(MOCK_STATUSES));\n    dispatch(expandTimelineSuccess(timelineId, MOCK_STATUSES, null, false, false, false));\n  }, []);\n  return /*#__PURE__*/React.createElement(Column, {\n    label: intl.formatMessage(messages.title),\n    transparent: true,\n    withHeader: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SubNavigation, {\n    message: intl.formatMessage(messages.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Timeline, {\n    scrollKey: \"\".concat(timelineId, \"_timeline\"),\n    timelineId: \"\".concat(timelineId).concat(onlyMedia ? ':media' : ''),\n    emptyMessage: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"empty_column.test\",\n      defaultMessage: \"The test timeline is empty.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }\n    }),\n    divideType: \"space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TestTimeline;"],"names":[],"sourceRoot":""}