{"version":3,"file":"packs/js/features/trends-4136ac1bda1313eb53f1.chunk.js","mappings":";;;;;;;;;;;;;;;AAAA,sBAiD2B;AAjD3B,IAAI,YAAY,GAAG,uFAAuF,CAAC;AAC5E;AACe;AACG;AACF;AACA;AAE/C,IAAM,WAAW,GAAG,cAAI;IAEpB,SAAK,GACH,IAAI,MADD,CACE;IACH,SAGF,kEAAS,EAAE,EAFP,MAAM,YACZ,UAAU,gBACG,CAAC;IAEhB,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,UAAU,EAAE;QACvF,OAAO,IAAI,CAAC;KACb;IAED,OAAO,aAAa,iDAAmB,CAAC,yDAAM,EAAE;QAC9C,KAAK,EAAE,aAAa,iDAAmB,CAAC,kDAAgB,EAAE;YACxD,EAAE,EAAE,cAAc;YAClB,cAAc,EAAE,QAAQ;YACxB,MAAM,EAAE,KAAI;YACZ,QAAQ,EAAE;gBACR,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,EAAE;aACjB;SACF,CAAC;QACF,MAAM,EAAE,KAAI;QACZ,QAAQ,EAAE;YACR,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;SAChB;KACF,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,iBAAO,IAAI,aAAa,wDAAmB,CAAC,kEAAO,EAAE;QACjI,GAAG,EAAE,OAAO,CAAC,IAAI;QACjB,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,KAAI;QACZ,QAAQ,EAAE;YACR,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;SAChB;KACF,CAAC,EAToG,CASpG,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,+DAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDsB;AACW;AACL;AACJ;AACpC,SAAS,SAAS;IAAjC,iBAmBC;IAlBC,IAAM,GAAG,GAAG,qDAAM,EAAE,CAAC;IACrB,IAAM,QAAQ,GAAG,6DAAc,EAAE,CAAC;IAElC,IAAM,SAAS,GAAG;;;;wBAGZ,qBAAM,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC;;oBADjC,IAAI,GACF,UAA+B,MAD7B;oBAEN,QAAQ,CAAC,0EAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7B,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,aAAG,IAAI,wEAAY,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;oBAC1D,sBAAO,cAAc,EAAC;;;SACvB,CAAC;IAEF,IAAM,MAAM,GAAG,+DAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE;QAC7C,eAAe,EAAE,EAAE;QACnB,SAAS,EAAE,MAAM,CAAC,aAAa;KAEhC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC","sources":["webpack://mangane-fe/./app/soapbox/features/ui/components/trends-panel.tsx","webpack://mangane-fe/./app/soapbox/queries/trends.ts"],"sourcesContent":["var _jsxFileName = \"/home/runner/work/Mangane/Mangane/app/soapbox/features/ui/components/trends-panel.tsx\";\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Hashtag from 'soapbox/components/hashtag';\nimport { Widget } from 'soapbox/components/ui';\nimport useTrends from 'soapbox/queries/trends';\n\nconst TrendsPanel = _ref => {\n  let {\n    limit\n  } = _ref;\n  const {\n    data: trends,\n    isFetching\n  } = useTrends();\n\n  if ((trends === null || trends === void 0 ? void 0 : trends.length) === 0 || isFetching) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Widget, {\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"trends.title\",\n      defaultMessage: \"Trends\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, trends === null || trends === void 0 ? void 0 : trends.slice(0, limit).map(hashtag => /*#__PURE__*/React.createElement(Hashtag, {\n    key: hashtag.name,\n    hashtag: hashtag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TrendsPanel;","import { useQuery } from '@tanstack/react-query';\nimport { fetchTrendsSuccess } from 'soapbox/actions/trends';\nimport { useApi, useAppDispatch } from 'soapbox/hooks';\nimport { normalizeTag } from 'soapbox/normalizers';\nexport default function useTrends() {\n  const api = useApi();\n  const dispatch = useAppDispatch();\n\n  const getTrends = async () => {\n    const {\n      data\n    } = await api.get('/api/v1/trends');\n    dispatch(fetchTrendsSuccess(data));\n    const normalizedData = data.map(tag => normalizeTag(tag));\n    return normalizedData;\n  };\n\n  const result = useQuery(['trends'], getTrends, {\n    placeholderData: [],\n    staleTime: 600000 // 10 minutes\n\n  });\n  return result;\n}"],"names":[],"sourceRoot":""}